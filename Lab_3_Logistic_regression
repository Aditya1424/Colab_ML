import numpy as np
import pandas as pd
import matplotlib.pyplot as plt

data=pd.read_csv('../Dataset/Social_Network_Ads.csv')
data.head()

from sklearn import preprocessing
le=preprocessing.LabelEncoder()
data['Gender']=le.fit_transform(data['Gender'])
data.head()

from sklearn.model_selection import train_test_split
X=data[['User ID','Gender','Age','EstimatedSalary']].values
y=data['Purchased'].values
X_train,X_test,y_train,y_test=train_test_split(X,y,test_size=0.20,random_state=0)
print(X_train)
print()
print(X_test)

from sklearn.linear_model import LogisticRegression
#initialising model 
logreg=LogisticRegression()
#fitting the model
logreg.fit(X_train,y_train)
#predicting
y_pred=logreg.predict(X_test)

print(y_pred)
print(y_test)

from sklearn import metrics
cnf_matrix=metrics.confusion_matrix(y_test,y_pred)
print(cnf_matrix)
print()
print("Accuracy: ",metrics.accuracy_score(y_test,y_pred))
print("Precision: ",metrics.precision_score(y_test,y_pred))
print("Recall: ",metrics.recall_score(y_test,y_pred))
print("f1 score: ",metrics.f1_score(y_test,y_pred))

from sklearn.model_selection import train_test_split
X_scale=data[['Gender','Age','EstimatedSalary']].values
y_scale=data['Purchased'].values
X_train,X_test,y_train,y_test=train_test_split(X_scale,y_scale,test_size=0.20,random_state=0)
print(X_train)
print()
print(X_test)

#standard scaling
from pandas.plotting import scatter_matrix
from sklearn.preprocessing import StandardScaler
std_scaler = StandardScaler()
transformed_data=std_scaler.fit_transform(X_train)
print(transformed_data)
pd.DataFrame(transformed_data).hist()

from sklearn.linear_model import LogisticRegression
#initialising model 
logreg=LogisticRegression()
#fitting the model
logreg.fit(transformed_data,y_train)
#predicting
y_pred=logreg.predict(std_scaler.transform(X_test))

print(y_pred)
print(y_test)

from sklearn import metrics
cnf_matrix=metrics.confusion_matrix(y_test,y_pred)
print(cnf_matrix)
print()
print("Accuracy: ",metrics.accuracy_score(y_test,y_pred))
print("Precision: ",metrics.precision_score(y_test,y_pred))
print("Recall: ",metrics.recall_score(y_test,y_pred))
print("f1 score: ",metrics.f1_score(y_test,y_pred))
