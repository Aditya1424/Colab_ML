import numpy as np
import pandas as pd
import matplotlib.pyplot as plt

data=pd.read_csv('../Dataset/winequality_red.csv')
data.head(20)
# data.describe()

#What to do-----
# read file
# extract features(X) and target value(y)
# scalling
# apply PCA
# train test split
# use logistic regression 
# evaluate the performance

X=data.drop(columns='quality')
y=data['quality']

from sklearn.preprocessing import StandardScaler
std_scaler=StandardScaler()
std_X=std_scaler.fit_transform(X)
print(std_X)

from sklearn.decomposition import PCA
pca=PCA(n_components=2)
X_pca=pca.fit_transform(std_X)
print(X_pca)

from sklearn.model_selection import train_test_split
X_train,X_test,y_train,y_test=train_test_split(X_pca,y,test_size=0.20,random_state=0)
print(X_train)
print(X_test)

from sklearn.linear_model import LogisticRegression
lgt=LogisticRegression()
model=lgt.fit(X_train,y_train)
y_pred=model.predict(X_test)
print(y_pred)
print(np.array(y_test))

from sklearn import metrics
cnf_matrix=metrics.confusion_matrix(y_test,y_pred)
print(cnf_matrix)
print()
print("Accuracy: ",metrics.accuracy_score(y_test,y_pred))
print("Precision: ",metrics.precision_score(y_test,y_pred,average='weighted'))
print("Recall: ",metrics.recall_score(y_test,y_pred,average='weighted'))
print("f1 score: ",metrics.f1_score(y_test,y_pred,average='weighted'))

from sklearn.metrics import classification_report
report=classification_report(y_test,y_pred)
print(report)

